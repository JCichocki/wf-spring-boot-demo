apiVersion: v1
kind: ServiceAccount
metadata:
  name: sb-demo-pipeline-sa
  labels:
    app.kubernetes.io/name: sb-demo
    app.kubernetes.io/component: pipeline
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: sb-demo-pipeline-role
  labels:
    app.kubernetes.io/name: sb-demo
    app.kubernetes.io/component: pipeline
rules:
  # Permissions for managing deployments, services, routes
  - apiGroups: ["apps"]
    resources: ["deployments", "replicasets"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["services", "configmaps", "secrets"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  - apiGroups: ["route.openshift.io"]
    resources: ["routes"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  
  # Permissions for managing pods (for deployment status checks)
  - apiGroups: [""]
    resources: ["pods", "pods/log"]
    verbs: ["get", "list", "watch"]
  
  # Permissions for managing image streams (OpenShift specific)
  - apiGroups: ["image.openshift.io"]
    resources: ["imagestreams", "imagestreamtags"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  
  # Permissions for managing build configs (if needed)
  - apiGroups: ["build.openshift.io"]
    resources: ["buildconfigs", "builds"]
    verbs: ["get", "list", "create", "update", "patch", "delete"]
  
  # Permissions for getting project/namespace info
  - apiGroups: ["project.openshift.io"]
    resources: ["projects"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sb-demo-pipeline-rolebinding
  labels:
    app.kubernetes.io/name: sb-demo
    app.kubernetes.io/component: pipeline
subjects:
  - kind: ServiceAccount
    name: sb-demo-pipeline-sa
    namespace: "" # Will be filled by the namespace where this is applied
roleRef:
  kind: Role
  name: sb-demo-pipeline-role
  apiGroup: rbac.authorization.k8s.io
---
# ClusterRole for image registry access (if using internal registry)
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: sb-demo-image-registry-access
  labels:
    app.kubernetes.io/name: sb-demo
    app.kubernetes.io/component: pipeline
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["builder-dockercfg", "default-dockercfg"]
    verbs: ["get"]
  - apiGroups: ["image.openshift.io"]
    resources: ["imagestreams"]
    verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sb-demo-image-registry-binding
  labels:
    app.kubernetes.io/name: sb-demo
    app.kubernetes.io/component: pipeline
subjects:
  - kind: ServiceAccount
    name: sb-demo-pipeline-sa
    namespace: "" # Will be filled by the namespace where this is applied
roleRef:
  kind: ClusterRole
  name: sb-demo-image-registry-access
  apiGroup: rbac.authorization.k8s.io
---
# Add system:image-builder role for buildah to push images
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: sb-demo-image-builder-binding
  labels:
    app.kubernetes.io/name: sb-demo
    app.kubernetes.io/component: pipeline
subjects:
  - kind: ServiceAccount
    name: sb-demo-pipeline-sa
roleRef:
  kind: ClusterRole
  name: system:image-builder
  apiGroup: rbac.authorization.k8s.io