apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-build
  labels:
    app.kubernetes.io/version: "0.8"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build an image using Buildah"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  description: >-
    Buildah task builds source into a container image and
    then pushes it to a container registry.

    Buildah Task builds source into a container image using Project Atomic's
    Buildah build tool.It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.
  params:
    - name: IMAGE
      description: Reference of the image buildah will produce.
    - name: BUILDER_IMAGE
      description: The location of the buildah builder image.
      default: registry.redhat.io/rhel8/buildah@sha256:180c4d9849b6ab0e5465d30d4f3a77765cf0d5cfb1e297c908ae0988aff8b506
    - name: STORAGE_DRIVER
      description: Set buildah storage driver
      default: vfs
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
    - name: CONTEXT
      description: Path to the directory to use as context.
      default: .
    - name: TLSVERIFY
      description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
      default: "true"
    - name: FORMAT
      description: The format of the built container, oci or docker
      default: "oci"
    - name: BUILD_EXTRA_ARGS
      description: Extra parameters passed for the build command when building images.
      default: ""
    - name: PUSH_EXTRA_ARGS
      description: Extra parameters passed for the push command when pushing images.
      type: string
      default: ""
    - name: SKIP_PUSH
      description: Skip pushing the built image
      default: "false"
  workspaces:
    - name: source
      description: Workspace containing the source to build.
    - name: sslcertdir
      optional: true
      description: Workspace containing CA certificates, this will be used by buildah to verify registry certificates.
    - name: dockerconfig
      description: >-
        An optional workspace that allows providing a .docker/config.json file
        for Buildah to access the container registry.
        The file should be placed at the root of the Workspace with name config.json.
      optional: true
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: Image repository where the built image would be pushed to
  steps:
    - name: build-and-push
      image: $(params.BUILDER_IMAGE)
      workingDir: $(workspaces.source.path)
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        
        # Check if Dockerfile exists
        if [ ! -f "$(params.CONTEXT)/$(params.DOCKERFILE)" ]; then
          echo "Creating default Dockerfile for Spring Boot application..."
          cat > $(params.CONTEXT)/Dockerfile <<EOF
        FROM registry.access.redhat.com/ubi8/openjdk-17:1.20
        
        # Copy the application JAR
        COPY target/*.jar app.jar
        
        # Expose the application port
        EXPOSE 8080
        
        # Add health check
        HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
          CMD curl -f http://localhost:8080/actuator/health || exit 1
        
        # Run the application
        ENTRYPOINT ["java", "-jar", "/deployments/app.jar"]
        EOF
          echo "Default Dockerfile created"
        fi
        
        # Buildah build command
        buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
          $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \
          --tls-verify=$(params.TLSVERIFY) --no-cache \
          -f $(params.CONTEXT)/$(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)
        
        [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0
        
        # Check for dockerconfig workspace
        if [ "$(workspaces.dockerconfig.bound)" = "true" ] ; then
          if test -f "$(workspaces.dockerconfig.path)/config.json"; then
            export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"
          elif test -f "$(workspaces.dockerconfig.path)/.dockerconfigjson"; then
            cp "$(workspaces.dockerconfig.path)/.dockerconfigjson" "$HOME/.docker/config.json"
            export DOCKER_CONFIG="$HOME/.docker"
          elif test -f "$(workspaces.dockerconfig.path)/.dockercfg"; then
            cp "$(workspaces.dockerconfig.path)/.dockercfg" "$HOME/.dockercfg"
          fi
        fi
        
        # Push the image
        buildah --storage-driver=$(params.STORAGE_DRIVER) push \
          $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
          --digestfile /tmp/image-digest $(params.IMAGE) \
          docker://$(params.IMAGE)
        
        # Store results
        cat /tmp/image-digest | tee $(results.IMAGE_DIGEST.path)
        echo "$(params.IMAGE)" | tee $(results.IMAGE_URL.path)
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      securityContext:
        privileged: true
        capabilities:
          add:
            - SETFCAP
  volumes:
    - name: varlibcontainers
      emptyDir: {}